{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport { connect, useDispatch, useSelector } from 'react-redux';\nimport { gray, green, lightGreen, lightPurple, red, textColor } from \"../utils/colors\";\nimport ButtonText from \"../components/ButtonText\";\nimport Button from \"../components/Button\";\nimport { clearLocalNotification, setLocalNotification } from \"../utils/helpers\";\n\nvar Quiz = function Quiz(_ref) {\n  var _route$params, _questions$questionIn, _questions$questionIn2;\n\n  var route = _ref.route,\n      navigation = _ref.navigation,\n      decks = _ref.decks;\n  var id = (_route$params = route.params) == null ? void 0 : _route$params.id;\n  var deck = decks[id];\n  var questions = deck == null ? void 0 : deck.questions;\n\n  var setTitle = function setTitle(id) {\n    navigation.setOptions({\n      title: id\n    });\n  };\n\n  useEffect(function () {\n    var _route$params2;\n\n    setTitle(((_route$params2 = route.params) == null ? void 0 : _route$params2.id) + \" Quiz\");\n  });\n\n  if ((questions == null ? void 0 : questions.length) === 0) {\n    return React.createElement(View, {\n      style: {\n        flex: 1,\n        padding: 20,\n        justifyContent: 'center',\n        alignItems: 'center'\n      }\n    }, React.createElement(Text, {\n      style: styles.question\n    }, \"Sorry, you cannot take a quiz because there are no cards in deck\"));\n  }\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      questionIndex = _useState2[0],\n      setQuestionIndex = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      count = _useState4[0],\n      setCount = _useState4[1];\n\n  var _useState5 = useState(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      correctAnswers = _useState6[0],\n      setCorrectAnswers = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      disabledButtons = _useState8[0],\n      setDisabledButtons = _useState8[1];\n\n  var _useState9 = useState(true),\n      _useState10 = _slicedToArray(_useState9, 2),\n      showAnswer = _useState10[0],\n      setShowAnswer = _useState10[1];\n\n  var _useState11 = useState(true),\n      _useState12 = _slicedToArray(_useState11, 2),\n      nextQuestion = _useState12[0],\n      setNextQuestion = _useState12[1];\n\n  var markQuestion = function markQuestion(isCorrect) {\n    setCorrectAnswers(isCorrect ? correctAnswers + 1 : correctAnswers);\n    setDisabledButtons(true);\n    setShowAnswer(false);\n    setNextQuestion(false);\n  };\n\n  var nextQuestionHandler = function nextQuestionHandler() {\n    setQuestionIndex(questionIndex >= questions.length - 1 ? 0 : questionIndex + 1);\n    setCount(count + 1);\n    setShowAnswer(true);\n    setDisabledButtons(false);\n    setNextQuestion(true);\n  };\n\n  useEffect(function () {\n    var totalQuestion = questions == null ? void 0 : questions.length;\n\n    if (setQuestionIndex !== questionIndex) {\n      if (count >= totalQuestion) {\n        navigation.navigate('ScoreBoard', {\n          id: id,\n          correctAnswers: correctAnswers,\n          totalQuestion: totalQuestion\n        });\n        setQuestionIndex(0);\n        setCount(0);\n        setCorrectAnswers(0);\n        clearLocalNotification().then(setLocalNotification);\n      }\n    }\n  }, [questionIndex, setQuestionIndex, questions.length, count, id, navigation, correctAnswers]);\n  var animatedValue = new Animated.Value(0);\n  var frontInterpolate = animatedValue.interpolate({\n    inputRange: [0, 180],\n    outputRange: ['0deg', '180deg']\n  });\n  var backInterpolate = animatedValue.interpolate({\n    inputRange: [0, 180],\n    outputRange: ['180deg', '360deg']\n  });\n  var ref = useRef(0).current;\n  useEffect(function () {\n    animatedValue;\n    animatedValue.addListener(function (_ref2) {\n      var value = _ref2.value;\n      ref = value;\n    });\n    frontInterpolate;\n    backInterpolate;\n  }, [ref, frontInterpolate, backInterpolate]);\n  var frontAnimatedStyle = {\n    transform: [{\n      rotateY: frontInterpolate\n    }]\n  };\n  var backAnimatedStyle = {\n    transform: [{\n      rotateY: backInterpolate\n    }]\n  };\n\n  var FlipCard = function FlipCard() {\n    if (ref >= 90) {\n      Animated.spring(animatedValue, {\n        toValue: 0,\n        friction: 8,\n        tension: 10,\n        useNativeDriver: true\n      }).start();\n    } else {\n      Animated.spring(animatedValue, {\n        toValue: 180,\n        friction: 8,\n        tension: 10,\n        useNativeDriver: true\n      }).start();\n    }\n  };\n\n  return React.createElement(View, {\n    style: styles.container\n  }, React.createElement(View, null, React.createElement(Text, {\n    style: styles.count\n  }, questionIndex + 1, \" of \", questions && (questions == null ? void 0 : questions.length), ' ', (questions == null ? void 0 : questions.length) > 1 ? 'questions' : 'question')), React.createElement(View, {\n    style: styles.inner\n  }, React.createElement(View, {\n    style: styles.flipContainer\n  }, React.createElement(Animated.View, {\n    style: [frontAnimatedStyle, styles.flipCard]\n  }, React.createElement(Text, {\n    style: [styles.question]\n  }, (_questions$questionIn = questions[questionIndex]) == null ? void 0 : _questions$questionIn.question), React.createElement(ButtonText, {\n    disabled: showAnswer,\n    onPress: function onPress() {\n      return FlipCard();\n    },\n    style: {\n      fontSize: 15,\n      marginTop: 50\n    }\n  }, \"Show Answer\")), React.createElement(Animated.View, {\n    style: [backAnimatedStyle, styles.flipCard, styles.flipBack]\n  }, React.createElement(Text, {\n    style: [styles.answer]\n  }, (_questions$questionIn2 = questions[questionIndex]) == null ? void 0 : _questions$questionIn2.answer), React.createElement(ButtonText, {\n    disabled: showAnswer,\n    onPress: function onPress() {\n      return FlipCard();\n    },\n    style: {\n      fontSize: 15,\n      marginTop: 50\n    }\n  }, \"Show Question\"))), React.createElement(View, {\n    style: styles.btnContainer\n  }, React.createElement(Button, {\n    onPress: function onPress() {\n      return markQuestion(true);\n    },\n    disabled: disabledButtons,\n    btnStyle: {\n      backgroundColor: green,\n      borderColor: green\n    }\n  }, \"Correct\"), React.createElement(Button, {\n    onPress: function onPress() {\n      return markQuestion(false);\n    },\n    disabled: disabledButtons,\n    btnStyle: {\n      backgroundColor: red,\n      borderColor: red\n    }\n  }, \"InCorrect\"), React.createElement(View, {\n    style: {\n      marginTop: 30\n    }\n  }, React.createElement(ButtonText, {\n    onPress: function onPress() {\n      return nextQuestionHandler();\n    },\n    disabled: nextQuestion,\n    style: {\n      textAlign: 'right',\n      paddingRight: 50,\n      color: lightPurple,\n      fontSize: 17\n    }\n  }, \"Next\"))), React.createElement(View, {\n    style: {\n      height: '5%'\n    }\n  })));\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: lightGreen,\n    padding: 20\n  },\n  question: {\n    fontSize: 25,\n    fontWeight: 'bold',\n    color: textColor,\n    textAlign: 'center'\n  },\n  answer: {\n    fontSize: 25,\n    fontWeight: 'bold',\n    color: textColor,\n    textAlign: 'center'\n  },\n  inner: {\n    flex: 1,\n    flexDirection: 'column',\n    justifyContent: 'space-around',\n    marginTop: 40\n  },\n  flipContainer: {\n    alignItems: 'center'\n  },\n  count: {\n    fontSize: 20,\n    color: gray\n  },\n  flipBack: {\n    position: 'absolute',\n    top: 0\n  },\n  flipCard: {\n    backfaceVisibility: 'hidden'\n  }\n});\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    decks: state\n  };\n};\n\nexport default React.memo(connect(mapStateToProps)(Quiz));","map":{"version":3,"sources":["C:/Users/AHMED/Desktop/mobile-flashcards-udacity/views/Quiz.js"],"names":["React","useState","useEffect","useRef","connect","useDispatch","useSelector","gray","green","lightGreen","lightPurple","red","textColor","ButtonText","Button","clearLocalNotification","setLocalNotification","Quiz","route","navigation","decks","id","params","deck","questions","setTitle","setOptions","title","length","flex","padding","justifyContent","alignItems","styles","question","questionIndex","setQuestionIndex","count","setCount","correctAnswers","setCorrectAnswers","disabledButtons","setDisabledButtons","showAnswer","setShowAnswer","nextQuestion","setNextQuestion","markQuestion","isCorrect","nextQuestionHandler","totalQuestion","navigate","then","animatedValue","Animated","Value","frontInterpolate","interpolate","inputRange","outputRange","backInterpolate","ref","current","addListener","value","frontAnimatedStyle","transform","rotateY","backAnimatedStyle","FlipCard","spring","toValue","friction","tension","useNativeDriver","start","container","inner","flipContainer","flipCard","fontSize","marginTop","flipBack","answer","btnContainer","backgroundColor","borderColor","textAlign","paddingRight","color","height","StyleSheet","create","fontWeight","flexDirection","position","top","backfaceVisibility","mapStateToProps","state","memo"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\r\nimport { View, Text, StyleSheet, Animated } from 'react-native'\r\nimport { connect, useDispatch, useSelector } from 'react-redux'\r\nimport {\r\n  gray,\r\n  green,\r\n  lightGreen,\r\n  lightPurple,\r\n  red,\r\n  textColor,\r\n} from '../utils/colors'\r\nimport ButtonText from '../components/ButtonText'\r\nimport Button from '../components/Button'\r\nimport { clearLocalNotification, setLocalNotification } from '../utils/helpers'\r\n\r\nconst Quiz = ({ route, navigation, decks }) => {\r\n  const id = route.params?.id\r\n  const deck = decks[id]\r\n  const questions = deck?.questions\r\n\r\n  const setTitle = (id) => {\r\n    navigation.setOptions({ title: id })\r\n  }\r\n\r\n  useEffect(() => {\r\n    setTitle(`${route.params?.id} Quiz`)\r\n  })\r\n\r\n  if (questions?.length === 0) {\r\n    return (\r\n      <View\r\n        style={{\r\n          flex: 1,\r\n          padding: 20,\r\n          justifyContent: 'center',\r\n          alignItems: 'center',\r\n        }}\r\n      >\r\n        <Text style={styles.question}>\r\n          Sorry, you cannot take a quiz because there are no cards in deck\r\n        </Text>\r\n      </View>\r\n    )\r\n  }\r\n\r\n  const [questionIndex, setQuestionIndex] = useState(0)\r\n  const [count, setCount] = useState(0)\r\n  const [correctAnswers, setCorrectAnswers] = useState(0)\r\n  const [disabledButtons, setDisabledButtons] = useState(false)\r\n  const [showAnswer, setShowAnswer] = useState(true)\r\n  const [nextQuestion, setNextQuestion] = useState(true)\r\n\r\n  const markQuestion = (isCorrect) => {\r\n    setCorrectAnswers(isCorrect ? correctAnswers + 1 : correctAnswers)\r\n    setDisabledButtons(true)\r\n    setShowAnswer(false)\r\n    setNextQuestion(false)\r\n  }\r\n\r\n  const nextQuestionHandler = () => {\r\n    setQuestionIndex(\r\n      questionIndex >= questions.length - 1 ? 0 : questionIndex + 1\r\n    )\r\n    setCount(count + 1)\r\n    setShowAnswer(true)\r\n    setDisabledButtons(false)\r\n    setNextQuestion(true)\r\n  }\r\n\r\n  useEffect(() => {\r\n    const totalQuestion = questions?.length\r\n\r\n    if (setQuestionIndex !== questionIndex) {\r\n      if (count >= totalQuestion) {\r\n        navigation.navigate('ScoreBoard', {\r\n          id,\r\n          correctAnswers,\r\n          totalQuestion,\r\n        })\r\n        setQuestionIndex(0)\r\n        setCount(0)\r\n        setCorrectAnswers(0)\r\n        clearLocalNotification().then(setLocalNotification)\r\n      }\r\n    }\r\n  }, [\r\n    questionIndex,\r\n    setQuestionIndex,\r\n    questions.length,\r\n    count,\r\n    id,\r\n    navigation,\r\n    correctAnswers,\r\n  ])\r\n\r\n  const animatedValue = new Animated.Value(0)\r\n  let frontInterpolate = animatedValue.interpolate({\r\n    inputRange: [0, 180],\r\n    outputRange: ['0deg', '180deg'],\r\n  })\r\n  let backInterpolate = animatedValue.interpolate({\r\n    inputRange: [0, 180],\r\n    outputRange: ['180deg', '360deg'],\r\n  })\r\n\r\n  let ref = useRef(0).current\r\n\r\n  useEffect(() => {\r\n    animatedValue\r\n    animatedValue.addListener(({ value }) => {\r\n      ref = value\r\n    })\r\n    frontInterpolate\r\n    backInterpolate\r\n  }, [ref, frontInterpolate, backInterpolate])\r\n\r\n  const frontAnimatedStyle = {\r\n    transform: [{ rotateY: frontInterpolate }],\r\n  }\r\n\r\n  const backAnimatedStyle = {\r\n    transform: [{ rotateY: backInterpolate }],\r\n  }\r\n\r\n  const FlipCard = () => {\r\n    if (ref >= 90) {\r\n      Animated.spring(animatedValue, {\r\n        toValue: 0,\r\n        friction: 8,\r\n        tension: 10,\r\n        useNativeDriver: true,\r\n      }).start()\r\n    } else {\r\n      Animated.spring(animatedValue, {\r\n        toValue: 180,\r\n        friction: 8,\r\n        tension: 10,\r\n        useNativeDriver: true,\r\n      }).start()\r\n    }\r\n  }\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <View>\r\n        <Text style={styles.count}>\r\n          {questionIndex + 1} of {questions && questions?.length}{' '}\r\n          {questions?.length > 1 ? 'questions' : 'question'}\r\n        </Text>\r\n      </View>\r\n      <View style={styles.inner}>\r\n        <View style={styles.flipContainer}>\r\n          <Animated.View style={[frontAnimatedStyle, styles.flipCard]}>\r\n            <Text style={[styles.question]}>\r\n              {questions[questionIndex]?.question}\r\n            </Text>\r\n            <ButtonText\r\n              disabled={showAnswer}\r\n              onPress={() => FlipCard()}\r\n              style={{ fontSize: 15, marginTop: 50 }}\r\n            >\r\n              Show Answer\r\n            </ButtonText>\r\n          </Animated.View>\r\n          <Animated.View\r\n            style={[backAnimatedStyle, styles.flipCard, styles.flipBack]}\r\n          >\r\n            <Text style={[styles.answer]}>\r\n              {questions[questionIndex]?.answer}\r\n            </Text>\r\n            <ButtonText\r\n              disabled={showAnswer}\r\n              onPress={() => FlipCard()}\r\n              style={{ fontSize: 15, marginTop: 50 }}\r\n            >\r\n              Show Question\r\n            </ButtonText>\r\n          </Animated.View>\r\n        </View>\r\n        <View style={styles.btnContainer}>\r\n          <Button\r\n            onPress={() => markQuestion(true)}\r\n            disabled={disabledButtons}\r\n            btnStyle={{ backgroundColor: green, borderColor: green }}\r\n          >\r\n            Correct\r\n          </Button>\r\n          <Button\r\n            onPress={() => markQuestion(false)}\r\n            disabled={disabledButtons}\r\n            btnStyle={{ backgroundColor: red, borderColor: red }}\r\n          >\r\n            InCorrect\r\n          </Button>\r\n          <View style={{ marginTop: 30 }}>\r\n            <ButtonText\r\n              onPress={() => nextQuestionHandler()}\r\n              disabled={nextQuestion}\r\n              style={{\r\n                textAlign: 'right',\r\n                paddingRight: 50,\r\n                color: lightPurple,\r\n                fontSize: 17,\r\n              }}\r\n            >\r\n              Next\r\n            </ButtonText>\r\n          </View>\r\n        </View>\r\n        <View style={{ height: '5%' }} />\r\n      </View>\r\n    </View>\r\n  )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: lightGreen,\r\n    padding: 20,\r\n  },\r\n  question: {\r\n    fontSize: 25,\r\n    fontWeight: 'bold',\r\n    color: textColor,\r\n    textAlign: 'center',\r\n  },\r\n  answer: {\r\n    fontSize: 25,\r\n    fontWeight: 'bold',\r\n    color: textColor,\r\n    textAlign: 'center',\r\n  },\r\n  inner: {\r\n    flex: 1,\r\n    flexDirection: 'column',\r\n    justifyContent: 'space-around',\r\n    marginTop: 40,\r\n  },\r\n  flipContainer: {\r\n    alignItems: 'center',\r\n  },\r\n  count: {\r\n    fontSize: 20,\r\n    color: gray,\r\n  },\r\n  flipBack: {\r\n    position: 'absolute',\r\n    top: 0,\r\n  },\r\n  flipCard: {\r\n    backfaceVisibility: 'hidden',\r\n  },\r\n})\r\n\r\nconst mapStateToProps = (state) => {\r\n  return { decks: state }\r\n}\r\n\r\nexport default React.memo(connect(mapStateToProps)(Quiz))\r\n"]},"metadata":{},"sourceType":"module"}