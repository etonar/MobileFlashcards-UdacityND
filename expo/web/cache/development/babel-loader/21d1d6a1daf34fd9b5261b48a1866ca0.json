{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { DECKS_STORAGE_KEY } from \"./helpers\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nexport var decks = {\n  React: {\n    title: 'React',\n    questions: [{\n      question: 'What is React?',\n      answer: 'A library for managing user interfaces'\n    }, {\n      question: 'Where do you make Ajax requests in React?',\n      answer: 'The componentDidMount lifecycle event'\n    }]\n  },\n  JavaScript: {\n    title: 'JavaScript',\n    questions: [{\n      question: 'What is a closure?',\n      answer: 'The combination of a function and the lexical environment within which that function was declared.'\n    }]\n  }\n};\nexport var getDecks = function getDecks() {\n  var data;\n  return _regeneratorRuntime.async(function getDecks$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem(DECKS_STORAGE_KEY));\n\n        case 2:\n          data = _context.sent;\n\n          if (!(data === null)) {\n            _context.next = 5;\n            break;\n          }\n\n          return _context.abrupt(\"return\", AsyncStorage.setItem(DECKS_STORAGE_KEY, JSON.stringify(decks)));\n\n        case 5:\n          return _context.abrupt(\"return\", data === null ? decks : JSON.parse(data));\n\n        case 6:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var getDeck = function getDeck(id) {\n  var data;\n  return _regeneratorRuntime.async(function getDeck$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem(DECKS_STORAGE_KEY));\n\n        case 2:\n          data = _context2.sent;\n          return _context2.abrupt(\"return\", JSON.parse(data)[id]);\n\n        case 4:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var saveDeckTitle = function saveDeckTitle(title) {\n  return _regeneratorRuntime.async(function saveDeckTitle$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return _regeneratorRuntime.awrap(AsyncStorage.mergeItem(DECKS_STORAGE_KEY, JSON.stringify(_defineProperty({}, title, {\n            title: title,\n            questions: []\n          }))));\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var removeDeck = function removeDeck(key) {\n  var data, deck;\n  return _regeneratorRuntime.async(function removeDeck$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem(DECKS_STORAGE_KEY));\n\n        case 2:\n          data = _context4.sent;\n          deck = JSON.parse(data);\n          deck[key] = undefined;\n          delete deck[key];\n          AsyncStorage.setItem(DECKS_STORAGE_KEY, JSON.stringify(deck));\n\n        case 7:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var addCardToDeck = function addCardToDeck(title, card) {\n  var deck;\n  return _regeneratorRuntime.async(function addCardToDeck$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return _regeneratorRuntime.awrap(getDeck(title));\n\n        case 2:\n          deck = _context5.sent;\n          _context5.next = 5;\n          return _regeneratorRuntime.awrap(AsyncStorage.mergeItem(DECKS_STORAGE_KEY, JSON.stringify(_defineProperty({}, title, {\n            questions: _toConsumableArray(deck.questions).concat(card)\n          }))));\n\n        case 5:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};","map":{"version":3,"sources":["C:/Users/AHMED/Desktop/mobile-flashcards-udacity/utils/_DATA.js"],"names":["DECKS_STORAGE_KEY","AsyncStorage","decks","React","title","questions","question","answer","JavaScript","getDecks","getItem","data","setItem","JSON","stringify","parse","getDeck","id","saveDeckTitle","mergeItem","removeDeck","key","deck","undefined","addCardToDeck","card","concat"],"mappings":"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","sourcesContent":["import { DECKS_STORAGE_KEY } from './helpers'\r\nimport AsyncStorage from '@react-native-async-storage/async-storage'\r\n\r\nexport const decks = {\r\n  React: {\r\n    title: 'React',\r\n    questions: [\r\n      {\r\n        question: 'What is React?',\r\n        answer: 'A library for managing user interfaces',\r\n      },\r\n      {\r\n        question: 'Where do you make Ajax requests in React?',\r\n        answer: 'The componentDidMount lifecycle event',\r\n      },\r\n    ],\r\n  },\r\n  JavaScript: {\r\n    title: 'JavaScript',\r\n    questions: [\r\n      {\r\n        question: 'What is a closure?',\r\n        answer:\r\n          'The combination of a function and the lexical environment within which that function was declared.',\r\n      },\r\n    ],\r\n  },\r\n}\r\n\r\nexport const getDecks = async () => {\r\n  const data = await AsyncStorage.getItem(DECKS_STORAGE_KEY)\r\n  if (data === null) {\r\n    return AsyncStorage.setItem(DECKS_STORAGE_KEY, JSON.stringify(decks))\r\n  }\r\n  return data === null ? decks : JSON.parse(data)\r\n}\r\n\r\nexport const getDeck = async (id) => {\r\n  const data = await AsyncStorage.getItem(DECKS_STORAGE_KEY)\r\n  return JSON.parse(data)[id]\r\n}\r\n\r\nexport const saveDeckTitle = async (title) => {\r\n  await AsyncStorage.mergeItem(\r\n    DECKS_STORAGE_KEY,\r\n    JSON.stringify({\r\n      [title]: {\r\n        title,\r\n        questions: [],\r\n      },\r\n    })\r\n  )\r\n}\r\n\r\nexport const removeDeck = async (key) => {\r\n  const data = await AsyncStorage.getItem(DECKS_STORAGE_KEY)\r\n  const deck = JSON.parse(data)\r\n  deck[key] = undefined\r\n  delete deck[key]\r\n  AsyncStorage.setItem(DECKS_STORAGE_KEY, JSON.stringify(deck))\r\n}\r\n\r\nexport const addCardToDeck = async (title, card) => {\r\n  const deck = await getDeck(title)\r\n  await AsyncStorage.mergeItem(\r\n    DECKS_STORAGE_KEY,\r\n    JSON.stringify({\r\n      [title]: {\r\n        questions: [...deck.questions].concat(card),\r\n      },\r\n    })\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}