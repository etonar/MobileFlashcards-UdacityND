{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport { black, green, lightGreen, textColor, red } from \"../utils/colors\";\nimport Button from \"../components/Button\";\nimport { useDispatch } from 'react-redux';\nimport { handleAddCard } from \"../redux/actions\";\nimport { addCardToDeck } from \"../utils/_DATA\";\n\nvar NewQuestion = function NewQuestion(_ref) {\n  var _route$params3;\n\n  var navigation = _ref.navigation,\n      route = _ref.route;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      question = _useState2[0],\n      setQuestion = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      answer = _useState4[0],\n      setAnswer = _useState4[1];\n\n  var dispatch = useDispatch();\n\n  var handleSubmit = function handleSubmit() {\n    var _route$params;\n\n    var id = (_route$params = route.params) == null ? void 0 : _route$params.title;\n    var card = {\n      question: question,\n      answer: answer\n    };\n\n    if (question.trim() === '' || question.trim().length < 2) {\n      return alert('Question cannot be empty & Character length must be greater than 2');\n    } else if (answer.trim() === '' || answer.trim().length < 2) {\n      return alert('Answer cannot be empty & Character length must be greater than 2');\n    }\n\n    dispatch(handleAddCard(id, card));\n    setQuestion('');\n    setAnswer('');\n    addCardToDeck(id, card);\n    navigation.goBack();\n  };\n\n  var setTitle = function setTitle(id) {\n    navigation.setOptions({\n      title: id\n    });\n  };\n\n  useEffect(function () {\n    var _route$params2;\n\n    setTitle(\"Add Card to \" + ((_route$params2 = route.params) == null ? void 0 : _route$params2.title));\n  });\n  var disabled = !question.trim() || !answer.trim();\n  return React.createElement(KeyboardAvoidingView, {\n    behavior: Platform.OS === 'ios' ? 'padding' : 'height',\n    style: styles.container\n  }, React.createElement(TouchableWithoutFeedback, {\n    onPress: Keyboard.dismiss\n  }, React.createElement(View, {\n    style: styles.innerContainer\n  }, React.createElement(Text, {\n    style: styles.text\n  }, \"Add question and answer to \" + ((_route$params3 = route.params) == null ? void 0 : _route$params3.title) + \" deck card\"), React.createElement(View, {\n    style: styles.inputContainer\n  }, React.createElement(TextInput, {\n    style: styles.input,\n    placeholder: \"Question\",\n    name: \"question\",\n    autoFocus: true,\n    returnKeyType: \"next\",\n    onChangeText: function onChangeText(question) {\n      return setQuestion(question);\n    },\n    value: question\n  }), React.createElement(TextInput, {\n    style: styles.input,\n    placeholder: \"Answer\",\n    name: \"answer\",\n    returnKeyType: \"done\",\n    onChangeText: function onChangeText(answer) {\n      return setAnswer(answer);\n    },\n    value: answer,\n    onSubmitEditing: handleSubmit\n  })), React.createElement(View, {\n    style: {\n      alignItems: 'center'\n    }\n  }, React.createElement(Button, {\n    onPress: handleSubmit,\n    text: \"Submit\",\n    disabled: disabled,\n    btnStyle: {\n      backgroundColor: green,\n      borderColor: green\n    }\n  }, \"Submit\")), React.createElement(View, {\n    style: {\n      height: '30%'\n    }\n  }))));\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: lightGreen\n  },\n  innerContainer: {\n    flex: 1,\n    justifyContent: 'space-around',\n    padding: 24\n  },\n  text: {\n    fontSize: 22,\n    color: textColor,\n    fontWeight: 'bold',\n    textAlign: 'center',\n    marginBottom: 35\n  },\n  error: {\n    color: red,\n    fontSize: 12\n  },\n  inputContainer: {\n    marginTop: -30\n  },\n  input: {\n    borderColor: black,\n    borderWidth: 1,\n    height: 50,\n    padding: 10,\n    marginTop: 15,\n    fontSize: 18,\n    borderRadius: Platform.OS === 'ios' ? 9 : 4\n  }\n});\nexport default NewQuestion;","map":{"version":3,"sources":["C:/Users/AHMED/Desktop/mobile-flashcards-udacity/views/NewQuestion.js"],"names":["React","useState","useEffect","black","green","lightGreen","textColor","red","Button","useDispatch","handleAddCard","addCardToDeck","NewQuestion","navigation","route","question","setQuestion","answer","setAnswer","dispatch","handleSubmit","id","params","title","card","trim","length","alert","goBack","setTitle","setOptions","disabled","Platform","OS","styles","container","Keyboard","dismiss","innerContainer","text","inputContainer","input","alignItems","backgroundColor","borderColor","height","StyleSheet","create","flex","justifyContent","padding","fontSize","color","fontWeight","textAlign","marginBottom","error","marginTop","borderWidth","borderRadius"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport {\r\n  View,\r\n  Text,\r\n  StyleSheet,\r\n  TextInput,\r\n  KeyboardAvoidingView,\r\n  Platform,\r\n  TouchableWithoutFeedback,\r\n  Keyboard,\r\n} from 'react-native'\r\nimport { black, green, lightGreen, textColor, red } from '../utils/colors'\r\nimport Button from '../components/Button'\r\nimport { useDispatch } from 'react-redux'\r\nimport { handleAddCard } from '../redux/actions'\r\nimport { addCardToDeck } from '../utils/_DATA'\r\n\r\nconst NewQuestion = ({ navigation, route }) => {\r\n  const [question, setQuestion] = useState('')\r\n  const [answer, setAnswer] = useState('')\r\n  const dispatch = useDispatch()\r\n\r\n  const handleSubmit = () => {\r\n    const id = route.params?.title\r\n    const card = { question, answer }\r\n\r\n    if (question.trim() === '' || question.trim().length < 2) {\r\n      return alert(\r\n        'Question cannot be empty & Character length must be greater than 2'\r\n      )\r\n    } else if (answer.trim() === '' || answer.trim().length < 2) {\r\n      return alert(\r\n        'Answer cannot be empty & Character length must be greater than 2'\r\n      )\r\n    }\r\n\r\n    dispatch(handleAddCard(id, card))\r\n\r\n    setQuestion('')\r\n    setAnswer('')\r\n    addCardToDeck(id, card)\r\n    navigation.goBack()\r\n  }\r\n\r\n  const setTitle = (id) => {\r\n    navigation.setOptions({ title: id })\r\n  }\r\n\r\n  useEffect(() => {\r\n    setTitle(`Add Card to ${route.params?.title}`)\r\n  })\r\n\r\n  const disabled = !question.trim() || !answer.trim()\r\n\r\n  return (\r\n    <KeyboardAvoidingView\r\n      behavior={Platform.OS === 'ios' ? 'padding' : 'height'}\r\n      style={styles.container}\r\n    >\r\n      <TouchableWithoutFeedback onPress={Keyboard.dismiss}>\r\n        <View style={styles.innerContainer}>\r\n          <Text\r\n            style={styles.text}\r\n          >{`Add question and answer to ${route.params?.title} deck card`}</Text>\r\n          <View style={styles.inputContainer}>\r\n            <TextInput\r\n              style={styles.input}\r\n              placeholder='Question'\r\n              name='question'\r\n              autoFocus={true}\r\n              returnKeyType='next'\r\n              onChangeText={(question) => setQuestion(question)}\r\n              value={question}\r\n            />\r\n            <TextInput\r\n              style={styles.input}\r\n              placeholder='Answer'\r\n              name='answer'\r\n              returnKeyType='done'\r\n              onChangeText={(answer) => setAnswer(answer)}\r\n              value={answer}\r\n              onSubmitEditing={handleSubmit}\r\n            />\r\n          </View>\r\n          <View style={{ alignItems: 'center' }}>\r\n            <Button\r\n              onPress={handleSubmit}\r\n              text='Submit'\r\n              disabled={disabled}\r\n              btnStyle={{ backgroundColor: green, borderColor: green }}\r\n            >\r\n              Submit\r\n            </Button>\r\n          </View>\r\n          <View style={{ height: '30%' }} />\r\n        </View>\r\n      </TouchableWithoutFeedback>\r\n    </KeyboardAvoidingView>\r\n  )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: lightGreen,\r\n  },\r\n  innerContainer: {\r\n    flex: 1,\r\n    justifyContent: 'space-around',\r\n    padding: 24,\r\n  },\r\n  text: {\r\n    fontSize: 22,\r\n    color: textColor,\r\n    fontWeight: 'bold',\r\n    textAlign: 'center',\r\n    marginBottom: 35,\r\n  },\r\n  error: {\r\n    color: red,\r\n    fontSize: 12,\r\n  },\r\n  inputContainer: {\r\n    marginTop: -30,\r\n  },\r\n  input: {\r\n    borderColor: black,\r\n    borderWidth: 1,\r\n    height: 50,\r\n    padding: 10,\r\n    marginTop: 15,\r\n    fontSize: 18,\r\n    borderRadius: Platform.OS === 'ios' ? 9 : 4,\r\n  },\r\n})\r\n\r\nexport default NewQuestion\r\n"]},"metadata":{},"sourceType":"module"}