{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport * as Notifications from 'expo-notifications';\nexport var DECKS_STORAGE_KEY = 'MobileFlashcards:decks';\nvar NOTIFICATION_KEY = 'MobileFlashcards:notifications';\n\nvar createNotification = function createNotification() {\n  return {\n    title: 'Study Time!',\n    body: \"ðŸ‘‹ Don't forget to study today!\",\n    ios: {\n      sound: true\n    },\n    android: {\n      sound: true,\n      priority: 'high',\n      sticky: false,\n      vibrate: true\n    }\n  };\n};\n\nexport var clearLocalNotification = function clearLocalNotification() {\n  return _regeneratorRuntime.async(function clearLocalNotification$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(AsyncStorage.removeItem(NOTIFICATION_KEY));\n\n        case 2:\n          return _context.abrupt(\"return\", Notifications.cancelAllScheduledNotificationsAsync);\n\n        case 3:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var setLocalNotification = function setLocalNotification() {\n  AsyncStorage.getItem(NOTIFICATION_KEY).then(JSON.parse).then(function (data) {\n    if (data === null) {\n      Notifications.requestPermissionsAsync().then(function (_ref) {\n        var status = _ref.status;\n\n        if (status === 'granted') {\n          Notifications.cancelAllScheduledNotificationsAsync();\n          Notifications.scheduleNotificationAsync({\n            content: createNotification(),\n            trigger: {\n              hour: 23,\n              minute: 47,\n              repeats: true\n            }\n          });\n          Notifications.setNotificationHandler({\n            handleNotification: function handleNotification() {\n              return _regeneratorRuntime.async(function handleNotification$(_context2) {\n                while (1) {\n                  switch (_context2.prev = _context2.next) {\n                    case 0:\n                      return _context2.abrupt(\"return\", {\n                        shouldShowAlert: true,\n                        shouldPlaySound: false,\n                        shouldSetBadge: false\n                      });\n\n                    case 1:\n                    case \"end\":\n                      return _context2.stop();\n                  }\n                }\n              }, null, null, null, Promise);\n            }\n          });\n          AsyncStorage.setItem(NOTIFICATION_KEY, JSON.stringify(true));\n        }\n      });\n    }\n  });\n};\nexport var saveDeckTitle = function saveDeckTitle(title) {\n  return _regeneratorRuntime.async(function saveDeckTitle$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return _regeneratorRuntime.awrap(AsyncStorage.mergeItem(DECKS_STORAGE_KEY, JSON.stringify(_defineProperty({}, title, {\n            title: title,\n            questions: []\n          }))));\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};","map":{"version":3,"sources":["C:/Users/AHMED/Desktop/mobile-flashcards-udacity/utils/helpers.js"],"names":["AsyncStorage","Notifications","DECKS_STORAGE_KEY","NOTIFICATION_KEY","createNotification","title","body","ios","sound","android","priority","sticky","vibrate","clearLocalNotification","removeItem","cancelAllScheduledNotificationsAsync","setLocalNotification","getItem","then","JSON","parse","data","requestPermissionsAsync","status","scheduleNotificationAsync","content","trigger","hour","minute","repeats","setNotificationHandler","handleNotification","shouldShowAlert","shouldPlaySound","shouldSetBadge","setItem","stringify","saveDeckTitle","mergeItem","questions"],"mappings":";;AAAA,OAAOA,YAAP,MAAyB,2CAAzB;AACA,OAAO,KAAKC,aAAZ,MAA+B,oBAA/B;AAGA,OAAO,IAAMC,iBAAiB,GAAG,wBAA1B;AAGP,IAAMC,gBAAgB,GAAG,gCAAzB;;AAEA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,GAAM;AAC/B,SAAO;AACLC,IAAAA,KAAK,EAAE,aADF;AAELC,IAAAA,IAAI,EAAE,iCAFD;AAGLC,IAAAA,GAAG,EAAE;AACHC,MAAAA,KAAK,EAAE;AADJ,KAHA;AAMLC,IAAAA,OAAO,EAAE;AACPD,MAAAA,KAAK,EAAE,IADA;AAEPE,MAAAA,QAAQ,EAAE,MAFH;AAGPC,MAAAA,MAAM,EAAE,KAHD;AAIPC,MAAAA,OAAO,EAAE;AAJF;AANJ,GAAP;AAaD,CAdD;;AAgBA,OAAO,IAAMC,sBAAsB,GAAG,SAAzBA,sBAAyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAC9Bb,YAAY,CAACc,UAAb,CAAwBX,gBAAxB,CAD8B;;AAAA;AAAA,2CAE7BF,aAAa,CAACc,oCAFe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA/B;AAKP,OAAO,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,GAAM;AACxChB,EAAAA,YAAY,CAACiB,OAAb,CAAqBd,gBAArB,EACGe,IADH,CACQC,IAAI,CAACC,KADb,EAEGF,IAFH,CAEQ,UAACG,IAAD,EAAU;AACd,QAAIA,IAAI,KAAK,IAAb,EAAmB;AACjBpB,MAAAA,aAAa,CAACqB,uBAAd,GAAwCJ,IAAxC,CAA6C,gBAAgB;AAAA,YAAbK,MAAa,QAAbA,MAAa;;AAC3D,YAAIA,MAAM,KAAK,SAAf,EAA0B;AACxBtB,UAAAA,aAAa,CAACc,oCAAd;AAEAd,UAAAA,aAAa,CAACuB,yBAAd,CAAwC;AACtCC,YAAAA,OAAO,EAAErB,kBAAkB,EADW;AAEtCsB,YAAAA,OAAO,EAAE;AACPC,cAAAA,IAAI,EAAE,EADC;AAEPC,cAAAA,MAAM,EAAE,EAFD;AAGPC,cAAAA,OAAO,EAAE;AAHF;AAF6B,WAAxC;AASA5B,UAAAA,aAAa,CAAC6B,sBAAd,CAAqC;AACnCC,YAAAA,kBAAkB,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA,wDAAa;AAC/BC,wBAAAA,eAAe,EAAE,IADc;AAE/BC,wBAAAA,eAAe,EAAE,KAFc;AAG/BC,wBAAAA,cAAc,EAAE;AAHe,uBAAb;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADe,WAArC;AAQAlC,UAAAA,YAAY,CAACmC,OAAb,CAAqBhC,gBAArB,EAAuCgB,IAAI,CAACiB,SAAL,CAAe,IAAf,CAAvC;AACD;AACF,OAvBD;AAwBD;AACF,GA7BH;AA8BD,CA/BM;AAiCP,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAAOhC,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACrBL,YAAY,CAACsC,SAAb,CACJpC,iBADI,EAEJiB,IAAI,CAACiB,SAAL,qBACG/B,KADH,EACW;AACPA,YAAAA,KAAK,EAALA,KADO;AAEPkC,YAAAA,SAAS,EAAE;AAFJ,WADX,EAFI,CADqB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAtB","sourcesContent":["import AsyncStorage from '@react-native-async-storage/async-storage'\r\nimport * as Notifications from 'expo-notifications'\r\n\r\n// Decks Storage Keys\r\nexport const DECKS_STORAGE_KEY = 'MobileFlashcards:decks'\r\n\r\n// Notifications Keys\r\nconst NOTIFICATION_KEY = 'MobileFlashcards:notifications'\r\n\r\nconst createNotification = () => {\r\n  return {\r\n    title: 'Study Time!',\r\n    body: \"ðŸ‘‹ Don't forget to study today!\",\r\n    ios: {\r\n      sound: true,\r\n    },\r\n    android: {\r\n      sound: true,\r\n      priority: 'high',\r\n      sticky: false,\r\n      vibrate: true,\r\n    },\r\n  }\r\n}\r\n\r\nexport const clearLocalNotification = async () => {\r\n  await AsyncStorage.removeItem(NOTIFICATION_KEY)\r\n  return Notifications.cancelAllScheduledNotificationsAsync\r\n}\r\n\r\nexport const setLocalNotification = () => {\r\n  AsyncStorage.getItem(NOTIFICATION_KEY)\r\n    .then(JSON.parse)\r\n    .then((data) => {\r\n      if (data === null) {\r\n        Notifications.requestPermissionsAsync().then(({ status }) => {\r\n          if (status === 'granted') {\r\n            Notifications.cancelAllScheduledNotificationsAsync()\r\n\r\n            Notifications.scheduleNotificationAsync({\r\n              content: createNotification(),\r\n              trigger: {\r\n                hour: 23,\r\n                minute: 47,\r\n                repeats: true,\r\n              },\r\n            })\r\n\r\n            Notifications.setNotificationHandler({\r\n              handleNotification: async () => ({\r\n                shouldShowAlert: true,\r\n                shouldPlaySound: false,\r\n                shouldSetBadge: false,\r\n              }),\r\n            })\r\n\r\n            AsyncStorage.setItem(NOTIFICATION_KEY, JSON.stringify(true))\r\n          }\r\n        })\r\n      }\r\n    })\r\n}\r\n\r\nexport const saveDeckTitle = async (title) => {\r\n  await AsyncStorage.mergeItem(\r\n    DECKS_STORAGE_KEY,\r\n    JSON.stringify({\r\n      [title]: {\r\n        title,\r\n        questions: [],\r\n      },\r\n    })\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}